#include "Interpolare.h"
#include <iostream>

std::vector<double> Interpolare::vectorSigmoid	= { 0.0000454, 0.0000502, 0.0000554, 0.0000613, 0.0000677, 0.0000748, 0.0000827, 0.0000914, 0.000101, 0.0001117, 0.0001234, 0.0001364, 0.0001507, 0.0001666, 0.0001841, 0.0002034, 0.0002248, 0.0002485, 0.0002746, 0.0003034, 0.0003354, 0.0003706, 0.0004096, 0.0004526, 0.0005002, 0.0005528, 0.0006109, 0.0006751, 0.000746, 0.0008244, 0.0009111, 0.0010068, 0.0011125, 0.0012294, 0.0013585, 0.0015012, 0.0016588, 0.0018329, 0.0020253, 0.0022378, 0.0024726, 0.002732, 0.0030184, 0.0033348, 0.0036842, 0.0040701, 0.0044963, 0.0049668, 0.0054863, 0.0060598, 0.0066929, 0.0073915, 0.0081626, 0.0090133, 0.0099518, 0.0109869, 0.0121284, 0.0133869, 0.014774, 0.0163025, 0.0179862, 0.0198403, 0.0218813, 0.024127, 0.026597, 0.0293122, 0.0322955, 0.0355712, 0.0391657, 0.0431073, 0.0474259, 0.0521536, 0.0573242, 0.0629734, 0.0691384, 0.0758582, 0.0831727, 0.091123, 0.0997505, 0.1090968, 0.1192029, 0.1301085, 0.1418511, 0.1544653, 0.1679816, 0.1824255, 0.1978161, 0.214165, 0.2314752, 0.2497399, 0.2689414, 0.2890505, 0.3100255, 0.3318122, 0.3543437, 0.3775407, 0.4013123, 0.4255575, 0.450166, 0.4750208, 0.5, 0.5249792, 0.549834, 0.5744425, 0.5986877, 0.6224593, 0.6456563, 0.6681878, 0.6899745, 0.7109495, 0.7310586, 0.7502601, 0.7685248, 0.785835, 0.8021839, 0.8175745, 0.8320184, 0.8455347, 0.8581489, 0.8698915, 0.8807971, 0.8909032, 0.9002495, 0.908877, 0.9168273, 0.9241418, 0.9308616, 0.9370266, 0.9426758, 0.9478464, 0.9525741, 0.9568927, 0.9608343, 0.9644288, 0.9677045, 0.9706878, 0.973403, 0.975873, 0.9781187, 0.9801597, 0.9820138, 0.9836975, 0.985226, 0.9866131, 0.9878716, 0.9890131, 0.9900482, 0.9909867, 0.9918374, 0.9926085, 0.9933071, 0.9939402, 0.9945137, 0.9950332, 0.9955037, 0.9959299, 0.9963158, 0.9966652, 0.9969816, 0.997268, 0.9975274, 0.9977622, 0.9979747, 0.9981671, 0.9983412, 0.9984988, 0.9986415, 0.9987706, 0.9988875, 0.9989932, 0.9990889, 0.9991756, 0.999254, 0.9993249, 0.9993891, 0.9994472, 0.9994998, 0.9995474, 0.9995904, 0.9996294, 0.9996646, 0.9996966, 0.9997254, 0.9997515, 0.9997752, 0.9997966, 0.9998159, 0.9998334, 0.9998493, 0.9998636, 0.9998766, 0.9998883, 0.999899, 0.9999086, 0.9999173, 0.9999252, 0.9999323, 0.9999387, 0.9999446, 0.9999498 };
std::vector<double> Interpolare::vectorTanh		= { -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -1., -0.9999999, -0.9999999, -0.9999999, -0.9999999, -0.9999999, -0.9999998, -0.9999998, -0.9999998, -0.9999997, -0.9999997, -0.9999996, -0.9999995, -0.9999994, -0.9999993, -0.9999991, -0.9999989, -0.9999986, -0.9999983, -0.999998, -0.9999975, -0.999997, -0.9999963, -0.9999955, -0.9999945, -0.9999933, -0.9999918, -0.9999899, -0.9999877, -0.999985, -0.9999817, -0.9999776, -0.9999727, -0.9999666, -0.9999592, -0.9999502, -0.9999391, -0.9999257, -0.9999092, -0.9998891, -0.9998646, -0.9998346, -0.9997979, -0.9997532, -0.9996986, -0.9996319, -0.9995504, -0.9994508, -0.9993293, -0.9991809, -0.9989996, -0.9987782, -0.9985079, -0.9981779, -0.9977749, -0.997283, -0.9966824, -0.9959494, -0.9950548, -0.9939632, -0.9926315, -0.9910075, -0.9890274, -0.9866143, -0.9836749, -0.9800964, -0.9757431, -0.9704519, -0.9640276, -0.9562375, -0.946806, -0.9354091, -0.9216686, -0.9051483, -0.8853516, -0.8617232, -0.8336546, -0.800499, -0.7615942, -0.7162979, -0.6640368, -0.6043678, -0.5370496, -0.4621172, -0.379949, -0.2913126, -0.1973753, -0.099668, 0., 0.099668, 0.1973753, 0.2913126, 0.379949, 0.4621172, 0.5370496, 0.6043678, 0.6640368, 0.7162979, 0.7615942, 0.800499, 0.8336546, 0.8617232, 0.8853516, 0.9051483, 0.9216686, 0.9354091, 0.946806, 0.9562375, 0.9640276, 0.9704519, 0.9757431, 0.9800964, 0.9836749, 0.9866143, 0.9890274, 0.9910075, 0.9926315, 0.9939632, 0.9950548, 0.9959494, 0.9966824, 0.997283, 0.9977749, 0.9981779, 0.9985079, 0.9987782, 0.9989996, 0.9991809, 0.9993293, 0.9994508, 0.9995504, 0.9996319, 0.9996986, 0.9997532, 0.9997979, 0.9998346, 0.9998646, 0.9998891, 0.9999092, 0.9999257, 0.9999391, 0.9999502, 0.9999592, 0.9999666, 0.9999727, 0.9999776, 0.9999817, 0.999985, 0.9999877, 0.9999899, 0.9999918, 0.9999933, 0.9999945, 0.9999955, 0.9999963, 0.999997, 0.9999975, 0.999998, 0.9999983, 0.9999986, 0.9999989, 0.9999991, 0.9999993, 0.9999994, 0.9999995, 0.9999996, 0.9999997, 0.9999997, 0.9999998, 0.9999998, 0.9999998, 0.9999999, 0.9999999, 0.9999999, 0.9999999, 0.9999999, 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.};
Interpolare* Interpolare::sigmoid = nullptr;
Interpolare* Interpolare::tanh = nullptr;

Interpolare* Interpolare::getSigmoid()
{
	if (sigmoid == nullptr) {
		sigmoid = new Interpolare(&vectorSigmoid[0]);
	}
	return sigmoid;
}
Interpolare* Interpolare::getTanh()
{
	if (tanh == nullptr) {
		tanh = new Interpolare(&vectorTanh[0]);
	}
	return tanh;
}
//x este valoarea intre -15..15 pentru care vom obtine aproximarea functiei 
double Interpolare::Output(double x)
{
	double out = -2;
	if (x <= -10)
	{
		//incercam sa avem grija la index asa ca saturam la valoarea cea mai mica.
		out = this->vectorY[0];
	}
	else
	{
		//saturam acum la valoarea cea mai mare
		if (x > 10)
		{
			out = this->vectorY[dimVector-1];
		}
		else
		{
			//acum suntem siguri ca indexul calculat va fi in limitele 0..200
			//intai incercam sa obtinem indexul arrayului unde ne aflam.
			int poz = (int)((x+15)/0.1);

			double y2 = this->vectorY[poz];
			double y1 = this->vectorY[poz + 1];
			double x2 = -15    + poz * 0.1;
			double x1 = x2 + 0.1;
			out = (x - x2) * (y1 - y2)/(x1-x2) + y2;
		}
	}
	return out;
}