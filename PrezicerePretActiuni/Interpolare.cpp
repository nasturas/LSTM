#include "Interpolare.h"
#include <iostream>

double vectorSigmoid[200]	= { 0.268941, 0.270912, 0.272892, 0.27488, 0.276878, 0.278885, 0.2809, 0.282925, 0.284958, 0.287, 0.28905, 0.29111, 0.293178, 0.295254, 0.297339, 0.299433, 0.301535, 0.303645, 0.305764, 0.30789, 0.310025, 0.312169, 0.31432, 0.316479, 0.318646, 0.320821, 0.323004, 0.325195, 0.327393, 0.329599, 0.331812, 0.334033, 0.336261, 0.338497, 0.34074, 0.342989, 0.345246, 0.34751, 0.349781, 0.352059, 0.354344, 0.356635, 0.358932, 0.361237, 0.363547, 0.365864, 0.368187, 0.370517, 0.372852, 0.375193, 0.377541, 0.379893, 0.382252, 0.384616, 0.386986, 0.389361, 0.391741, 0.394126, 0.396517, 0.398912, 0.401312, 0.403717, 0.406127, 0.408541, 0.410959, 0.413382, 0.415809, 0.41824, 0.420676, 0.423115, 0.425557, 0.428004, 0.430454, 0.432907, 0.435364, 0.437823, 0.440286, 0.442752, 0.445221, 0.447692, 0.450166, 0.452642, 0.455121, 0.457602, 0.460085, 0.46257, 0.465057, 0.467546, 0.470036, 0.472528, 0.475021, 0.477515, 0.48001, 0.482507, 0.485004, 0.487502, 0.490001, 0.4925, 0.495, 0.4975, 0.5, 0.5025, 0.505, 0.507499, 0.509999, 0.512497, 0.514995, 0.517493, 0.519989, 0.522485, 0.524979, 0.527472, 0.529964, 0.532454, 0.534943, 0.53743, 0.539915, 0.542398, 0.544879, 0.547357, 0.549834, 0.552308, 0.554779, 0.557248, 0.559713, 0.562176, 0.564636, 0.567093, 0.569546, 0.571996, 0.574442, 0.576885, 0.579324, 0.581759, 0.58419, 0.586617, 0.58904, 0.591459, 0.593873, 0.596283, 0.598687, 0.601088, 0.603483, 0.605874, 0.608259, 0.610639, 0.613014, 0.615384, 0.617748, 0.620106, 0.622459, 0.624806, 0.627148, 0.629483, 0.631812, 0.634135, 0.636452, 0.638763, 0.641067, 0.643365, 0.645656, 0.647941, 0.650218, 0.652489, 0.654753, 0.65701, 0.65926, 0.661503, 0.663738, 0.665967, 0.668188, 0.670401, 0.672607, 0.674805, 0.676996, 0.679178, 0.681354, 0.683521, 0.68568, 0.687831, 0.689974, 0.692109, 0.694236, 0.696355, 0.698465, 0.700567, 0.70266, 0.704745, 0.706822, 0.70889, 0.710949, 0.713, 0.715042, 0.717075, 0.719099, 0.721115, 0.723122, 0.725119, 0.727108, 0.729088 };
double vectorTanh[200]		= { -0.761594, -0.757362, -0.753066, -0.748704, -0.744277, -0.739783, -0.735222, -0.730594, -0.725897, -0.721132, -0.716298, -0.711394, -0.706419, -0.701374, -0.696258, -0.69107, -0.685809, -0.680476, -0.67507, -0.66959, -0.664037, -0.658409, -0.652707, -0.64693, -0.641077, -0.635149, -0.629145, -0.623065, -0.61691, -0.610677, -0.604368, -0.597982, -0.59152, -0.58498, -0.578364, -0.57167, -0.5649, -0.558052, -0.551128, -0.544127, -0.53705, -0.529896, -0.522666, -0.51536, -0.507978, -0.500521, -0.492988, -0.485381, -0.4777, -0.469946, -0.462118, -0.454217, -0.446244, -0.4382, -0.430085, -0.421899, -0.413645, -0.405322, -0.396931, -0.388473, -0.379949, -0.371361, -0.362708, -0.353992, -0.345215, -0.336376, -0.327478, -0.318521, -0.309508, -0.300438, -0.291313, -0.282135, -0.272906, -0.263625, -0.254296, -0.244919, -0.235496, -0.226029, -0.216519, -0.206967, -0.197376, -0.187747, -0.178082, -0.168382, -0.158649, -0.148886, -0.139093, -0.129273, -0.119428, -0.109559, -0.0996686, -0.0897584, -0.0798304, -0.0698866, -0.0599288, -0.049959, -0.0399793, -0.0299917, -0.019998, -0.0100003, -6.59153e-07, 0.00999901, 0.0199967, 0.0299903, 0.039978, 0.0499577, 0.0599274, 0.0698852, 0.0798291, 0.0897571, 0.0996673, 0.109558, 0.119427, 0.129272, 0.139092, 0.148884, 0.158648, 0.16838, 0.17808, 0.187746, 0.197375, 0.206966, 0.216517, 0.226028, 0.235495, 0.244918, 0.254295, 0.263624, 0.272905, 0.282134, 0.291312, 0.300436, 0.309506, 0.31852, 0.327477, 0.336375, 0.345213, 0.353991, 0.362707, 0.37136, 0.379948, 0.388472, 0.39693, 0.405321, 0.413644, 0.421898, 0.430084, 0.438199, 0.446243, 0.454216, 0.462117, 0.469945, 0.477699, 0.48538, 0.492987, 0.50052, 0.507977, 0.515359, 0.522665, 0.529895, 0.537049, 0.544126, 0.551127, 0.558052, 0.564899, 0.571669, 0.578363, 0.584979, 0.591519, 0.597981, 0.604367, 0.610676, 0.616909, 0.623065, 0.629145, 0.635148, 0.641076, 0.646929, 0.652706, 0.658408, 0.664036, 0.66959, 0.675069, 0.680475, 0.685808, 0.691069, 0.696257, 0.701374, 0.706419, 0.711393, 0.716297, 0.721132, 0.725897, 0.730593, 0.735222, 0.739782, 0.744276, 0.748704, 0.753065, 0.757362 };
Interpolare* Interpolare::sigmoid = nullptr;
Interpolare* Interpolare::tanh = nullptr;

Interpolare* Interpolare::getSigmoid()
{
	if (sigmoid == nullptr) {
		sigmoid = new Interpolare(&vectorSigmoid[0]);
	}
	return sigmoid;
}
Interpolare* Interpolare::getTanh()
{
	if (tanh == nullptr) {
		tanh = new Interpolare(&vectorTanh[0]);
	}
	return tanh;
}
//x este valoarea intre -1..1 pentru care vom obtine aproximarea functiei 
double Interpolare::Output(double x)
{
	double out = -2;
	if (x <= -1)
	{
		//incercam sa avem grija la index asa ca saturam la valoarea cea mai mica.
		out = this->vectorY[0];
	}
	else
	{
		//saturam acum la valoarea cea mai mare
		if (x >= 1)
		{
			out = this->vectorY[dimVector-1];
		}
		else
		{
			//acum suntem siguri ca indexul calculat va fi in limitele 0..200
			//intai incercam sa obtinem indexul arrayului unde ne aflam.
			int poz = (int)((x + 1) / 0.01);
			double min = this->vectorY[poz];
			double max = this->vectorY[poz + 1];
			double minx = -1 + poz * 0.01;
			out = (x - minx) * (max - min) * 100 + min;
		}
	}
	return out;
}